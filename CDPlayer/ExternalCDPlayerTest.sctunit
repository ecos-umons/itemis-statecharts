// Example created by Tom Mens, Software Engineering Lab, University of Mons, Belgium, December 2023

testclass ExternalCDPlayerTest for statechart CDPlayer {
	
	// Testing the correct functioning of the CD Player by using only its remote control functionality
	// (i.e., by using only events triggered through the remote control).
	
	operation processOnOff() {
		// raise an event sent to the remote control (to turn on or off the CD player)
	    raise onOff
	    // process the event
	    proceed 1 cycle
		// and process the event that will be raised implicitly by the RemoteControl
		proceed  1 cycle	
	}
		
	operation processPlayPause() {
		// raise an event sent to the remote control (to play a CD or to put it in pause when it is already playing)
	    raise playPause
	    // process the event
	    proceed 1 cycle
		// and process the event that will be raised implicitly by the RemoteControl
		proceed  1 cycle	
	}
		
	operation processStop() {
		// raise an event sent to the remote control (to stop the CD player)
		raise stop
		proceed 1 cycle
		proceed 1 cycle
	}
	
	// test the statechart's initial configuration
	@Test
	operation testInitialStateConfiguration() {
		enter
		assert active(CDPlayer.Off)
	}
	
	operation activateCDPlayer() {
		// put the state machine in its initial state configuration
		enter
		// raise an event sent to the remote control (to turn on the CD player)
		processOnOff()
	}
	
	@Test
	operation testActivatedCDPlayer() {
		activateCDPlayer()
		assert called CD.turnOn()
 		assert active(CDPlayer.On)
		assert active(CDPlayer.On.r1.Stop)
	}
	
	@Test
	operation testDeactivateCDPlayer() {
		activateCDPlayer()
		// raise an event sent to the remote control (to turn off the CD player)
		processOnOff()
		assert called CD.turnOff()
		assert active(CDPlayer.Off)
	}
	
	@Test
	operation testPlay() {
		activateCDPlayer()
		assert isPlaying == false
		assert active(CDPlayer.On)
		assert active(CDPlayer.On.r1.Stop)
	    //start playing:
		processPlayPause()
		assert called CD.playing()
		assert active(CDPlayer.On.r1.Play)
		assert isPlaying == true
	}
	
	@Test
	operation testPlayPause() {
	    activateCDPlayer()
	    //start playing:
	    processPlayPause()
	    //pause CD player:
		processPlayPause()
		assert called CD.paused()
		assert active(CDPlayer.On.r1.Pause)
		assert isPlaying == false
	    //restart playing:
		processPlayPause()
		assert called CD.playing()
		assert active(CDPlayer.On.r1.Play)
		assert isPlaying == true
	}
		
	@Test
	operation testPlayStop() {
	    activateCDPlayer()
	    //start playing:
		processPlayPause()
		//stop playing:
		processStop()
		assert called CD.stopped()
		assert active(CDPlayer.On.r1.Stop)
		assert isPlaying == false
	}
	
	@Test
	operation testPlayPauseStop() {
	    activateCDPlayer()
	    //start playing:
	    processPlayPause()
	    //pause CD player:
		processPlayPause()
		assert called CD.paused()
		assert active(CDPlayer.On.r1.Pause)
		assert isPlaying == false
	    //stop CD player:
		processStop()
		assert called CD.stopped()
		assert active(CDPlayer.On.r1.Stop)
		assert isPlaying == false
	}
}

