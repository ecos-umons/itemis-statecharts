/** Generated by itemis CREATE code generator. */

package test;

import static org.mockito.Mockito.*;
import static org.hamcrest.CoreMatchers.*;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import .CDPlayer.CD;
import org.junit.*;
import static org.junit.Assert.*;
import CDPlayer;
import CDPlayer.State;
import com.yakindu.core.VirtualTimer;
import com.yakindu.core.VirtualTimer.VirtualTimeTask;
import com.yakindu.core.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for CDPlayer
 */
@SuppressWarnings("all")
public class BlackboxCDPlayerTest {
	CD.OperationCallback cDMock;
	
	private CDPlayer statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void blackboxCDPlayerTest_setUp() {
		statemachine = new CDPlayer();
		timer = new VirtualTimer(200);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 200, 200);
		statemachine.setTimerService(timer);
		cDMock = mock(CD.OperationCallback.class);
		statemachine.cD().setOperationCallback(cDMock);
		
		
	}

	@After
	public void blackboxCDPlayerTest_tearDown() {
		statemachine.cD().setOperationCallback(null);
		statemachine = null;
		
		timer = null;
	}
	
	public void processOnOff() {
		statemachine.raiseOnOff();
		timer.cycleLeap(1l);
		timer.cycleLeap(1l);
	}
	
	public void processPlayPause() {
		statemachine.raisePlayPause();
		timer.cycleLeap(1l);
		timer.cycleLeap(1l);
	}
	
	public void processStop() {
		statemachine.raiseStop();
		timer.cycleLeap(1l);
		timer.cycleLeap(1l);
	}
	
	@Test
	public void testInitialStateConfiguration() {
		statemachine.enter();
		verify(cDMock, atLeastOnce()).turnOff();
		 
	}
	
	public void activateCDPlayer() {
		statemachine.enter();
		processOnOff();
	}
	
	@Test
	public void testActivatedCDPlayer() {
		activateCDPlayer();
		verify(cDMock, atLeastOnce()).turnOn();
		 
	}
	
	@Test
	public void testDeactivateCDPlayer() {
		activateCDPlayer();
		processOnOff();
		verify(cDMock, atLeastOnce()).turnOff();
		 
	}
	
	@Test
	public void testPlay() {
		activateCDPlayer();
		assertTrue(statemachine.getIsPlaying() == false);
		processPlayPause();
		verify(cDMock, atLeastOnce()).playing();
		 
		assertTrue(statemachine.getIsPlaying() == true);
	}
	
	@Test
	public void testPlayPause() {
		activateCDPlayer();
		processPlayPause();
		processPlayPause();
		verify(cDMock, atLeastOnce()).paused();
		 
		assertTrue(statemachine.getIsPlaying() == false);
		processPlayPause();
		verify(cDMock, atLeastOnce()).playing();
		 
		assertTrue(statemachine.getIsPlaying() == true);
	}
	
	@Test
	public void testPlayStop() {
		activateCDPlayer();
		processPlayPause();
		processStop();
		verify(cDMock, atLeastOnce()).stopped();
		 
		assertTrue(statemachine.getIsPlaying() == false);
	}
	
	@Test
	public void testPlayPauseStop() {
		activateCDPlayer();
		processPlayPause();
		processPlayPause();
		verify(cDMock, atLeastOnce()).paused();
		 
		assertTrue(statemachine.getIsPlaying() == false);
		processStop();
		verify(cDMock, atLeastOnce()).stopped();
		 
		assertTrue(statemachine.getIsPlaying() == false);
	}
	
	@Test
	public void testTimeout() {
		statemachine.setTimeout(500l);
		activateCDPlayer();
		processPlayPause();
		processPlayPause();
		timer.timeLeap(1l*1000l);
		verify(cDMock, atLeastOnce()).turnOff();
		 
	}
}
