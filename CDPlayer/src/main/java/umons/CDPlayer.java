/** Generated by itemis CREATE code generator. */
package umons;

import com.yakindu.core.ICycleBased;
import com.yakindu.core.IStatemachine;
import com.yakindu.core.ITimed;
import com.yakindu.core.ITimerService;

public class CDPlayer implements IStatemachine, ITimed, ICycleBased {
	public static class RC {
		private boolean onOff;
		
		
		public void raiseOnOff() {
			onOff = true;
		}
		
		private boolean playPause;
		
		
		public void raisePlayPause() {
			playPause = true;
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
		}
		
		private boolean isPlaying;
		
		public boolean getIsPlaying() {
			return isPlaying;
		}
		
		public void setIsPlaying(boolean value) {
			this.isPlaying = value;
		}
		
	}
	
	public static class CD {
		public interface OperationCallback {
		
			public void turnOn();
			
			public void turnOff();
			
			public void playing();
			
			public void stopped();
			
			public void paused();
			
		}
		
		private OperationCallback operationCallback;
		
		public void setOperationCallback(OperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean on;
		
		
		public void raiseOn() {
			on = true;
		}
		
		private boolean off;
		
		
		public void raiseOff() {
			off = true;
		}
		
		private boolean play;
		
		
		public void raisePlay() {
			play = true;
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
		}
		
		private boolean pause;
		
		
		public void raisePause() {
			pause = true;
		}
		
		private long timeout;
		
		public long getTimeout() {
			return timeout;
		}
		
		public void setTimeout(long value) {
			this.timeout = value;
		}
		
	}
	
	private static class RCEvBuf {
		private boolean onOff;
		private boolean playPause;
		private boolean stop;
	}
	private static class CDEvBuf {
		private boolean on;
		private boolean off;
		private boolean play;
		private boolean stop;
		private boolean pause;
	}
	private static class TimeEventsEvBuf {
		private boolean cDPlayer_CDPlayer_On_r1_Pause_time_event_0;
	}
	private static class CDPlayerEvBuf {
		private RCEvBuf ifaceRC = new RCEvBuf();
		private CDEvBuf ifaceCD = new CDEvBuf();
		private TimeEventsEvBuf timeEvents = new TimeEventsEvBuf();
	}
	protected RC rC;
	
	protected CD cD;
	
	public enum State {
		REMOTECONTROL_OFF,
		REMOTECONTROL_ON,
		CDPLAYER_OFF,
		CDPLAYER_ON,
		CDPLAYER_ON_R1_STOP,
		CDPLAYER_ON_R1_PLAY,
		CDPLAYER_ON_R1_PAUSE,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[1];
	private final State[] stateVector = new State[2];
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private CDPlayerEvBuf current = new CDPlayerEvBuf();
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	private long stateConfVectorPosition;
	
	protected long getStateConfVectorPosition() {
		return stateConfVectorPosition;
	}
	
	protected void setStateConfVectorPosition(long value) {
		this.stateConfVectorPosition = value;
	}
	public CDPlayer() {
		rC = new RC();
		cD = new CD();
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 1; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		/* Default init sequence for statechart CDPlayer */
		rC.setIsPlaying(false);
		cD.setTimeout(10000l);
		
		isExecuting = false;
	}
	
	public void runCycle() {
		/* Performs a 'run to completion' step. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.cD.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface CD must be set.");
		}
		
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		swapInEvents();
		microStep();
		isExecuting = false;
	}
	
	public void enter() {
		/* Activates the state machine. */
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		if (this.cD.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface CD must be set.");
		}
		
		
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default enter sequence for statechart CDPlayer */
		enterSequence_RemoteControl_default();
		enterSequence_CDPlayer_default();
		isExecuting = false;
	}
	
	public void exit() {
		/* Deactivates the state machine. */
		if (getIsExecuting()) {
			return
			;
		}
		isExecuting = true;
		/* Default exit sequence for statechart CDPlayer */
		exitSequence_RemoteControl();
		exitSequence_CDPlayer();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void swapInEvents() {
		current.ifaceRC.onOff = rC.onOff;
		rC.onOff = false;
		current.ifaceRC.playPause = rC.playPause;
		rC.playPause = false;
		current.ifaceRC.stop = rC.stop;
		rC.stop = false;
		current.ifaceCD.on = cD.on;
		cD.on = false;
		current.ifaceCD.off = cD.off;
		cD.off = false;
		current.ifaceCD.play = cD.play;
		cD.play = false;
		current.ifaceCD.stop = cD.stop;
		cD.stop = false;
		current.ifaceCD.pause = cD.pause;
		cD.pause = false;
		current.timeEvents.cDPlayer_CDPlayer_On_r1_Pause_time_event_0 = timeEvents[0];
		timeEvents[0] = false;
	}
	
	private void clearInEvents() {
		rC.onOff = false;
		rC.playPause = false;
		rC.stop = false;
		cD.on = false;
		cD.off = false;
		cD.play = false;
		cD.stop = false;
		cD.pause = false;
		timeEvents[0] = false;
	}
	
	private void microStep() {
		long transitioned = -1l;
		stateConfVectorPosition = 0l;
		switch (stateVector[0]) {
		case REMOTECONTROL_OFF:
			transitioned = remoteControl_Off_react(transitioned);
			break;
		case REMOTECONTROL_ON:
			transitioned = remoteControl_On_react(transitioned);
			break;
		default:
			break;
		}
		if (getStateConfVectorPosition()<1l) {
			switch (stateVector[1]) {
			case CDPLAYER_OFF:
				cDPlayer_Off_react(transitioned);
				break;
			case CDPLAYER_ON_R1_STOP:
				cDPlayer_On_r1_Stop_react(transitioned);
				break;
			case CDPLAYER_ON_R1_PLAY:
				cDPlayer_On_r1_Play_react(transitioned);
				break;
			case CDPLAYER_ON_R1_PAUSE:
				cDPlayer_On_r1_Pause_react(transitioned);
				break;
			default:
				break;
			}
		}
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case REMOTECONTROL_OFF:
			return stateVector[0] == State.REMOTECONTROL_OFF;
		case REMOTECONTROL_ON:
			return stateVector[0] == State.REMOTECONTROL_ON;
		case CDPLAYER_OFF:
			return stateVector[1] == State.CDPLAYER_OFF;
		case CDPLAYER_ON:
			return stateVector[1].ordinal() >= State.
					CDPLAYER_ON.ordinal()&& stateVector[1].ordinal() <= State.CDPLAYER_ON_R1_PAUSE.ordinal();
		case CDPLAYER_ON_R1_STOP:
			return stateVector[1] == State.CDPLAYER_ON_R1_STOP;
		case CDPLAYER_ON_R1_PLAY:
			return stateVector[1] == State.CDPLAYER_ON_R1_PLAY;
		case CDPLAYER_ON_R1_PAUSE:
			return stateVector[1] == State.CDPLAYER_ON_R1_PAUSE;
		default:
			return false;
		}
	}
	
	public void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public void raiseTimeEvent(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public RC rC() {
		return rC;
	}
	
	public CD cD() {
		return cD;
	}
	
	
	/* Entry action for state 'Off'. */
	private void entryAction_CDPlayer_Off() {
		/* Entry action for state 'Off'. */
		cD.operationCallback.turnOff();
	}
	
	/* Entry action for state 'On'. */
	private void entryAction_CDPlayer_On() {
		/* Entry action for state 'On'. */
		cD.operationCallback.turnOn();
	}
	
	/* Entry action for state 'Stop'. */
	private void entryAction_CDPlayer_On_r1_Stop() {
		/* Entry action for state 'Stop'. */
		cD.operationCallback.stopped();
	}
	
	/* Entry action for state 'Play'. */
	private void entryAction_CDPlayer_On_r1_Play() {
		/* Entry action for state 'Play'. */
		rC.setIsPlaying(true);
		cD.operationCallback.playing();
	}
	
	/* Entry action for state 'Pause'. */
	private void entryAction_CDPlayer_On_r1_Pause() {
		/* Entry action for state 'Pause'. */
		timerService.setTimer(this, 0, cD.getTimeout(), false);
		cD.operationCallback.paused();
	}
	
	/* Exit action for state 'Play'. */
	private void exitAction_CDPlayer_On_r1_Play() {
		/* Exit action for state 'Play'. */
		rC.setIsPlaying(false);
	}
	
	/* Exit action for state 'Pause'. */
	private void exitAction_CDPlayer_On_r1_Pause() {
		/* Exit action for state 'Pause'. */
		timerService.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_RemoteControl_Off_default() {
		/* 'default' enter sequence for state Off */
		stateVector[0] = State.REMOTECONTROL_OFF;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_RemoteControl_On_default() {
		/* 'default' enter sequence for state On */
		stateVector[0] = State.REMOTECONTROL_ON;
		stateConfVectorPosition = 0;
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_CDPlayer_Off_default() {
		/* 'default' enter sequence for state Off */
		entryAction_CDPlayer_Off();
		stateVector[1] = State.CDPLAYER_OFF;
		stateConfVectorPosition = 1;
	}
	
	/* 'default' enter sequence for state Stop */
	private void enterSequence_CDPlayer_On_r1_Stop_default() {
		/* 'default' enter sequence for state Stop */
		entryAction_CDPlayer_On_r1_Stop();
		stateVector[1] = State.CDPLAYER_ON_R1_STOP;
		stateConfVectorPosition = 1;
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Play */
	private void enterSequence_CDPlayer_On_r1_Play_default() {
		/* 'default' enter sequence for state Play */
		entryAction_CDPlayer_On_r1_Play();
		stateVector[1] = State.CDPLAYER_ON_R1_PLAY;
		stateConfVectorPosition = 1;
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for state Pause */
	private void enterSequence_CDPlayer_On_r1_Pause_default() {
		/* 'default' enter sequence for state Pause */
		entryAction_CDPlayer_On_r1_Pause();
		stateVector[1] = State.CDPLAYER_ON_R1_PAUSE;
		stateConfVectorPosition = 1;
		historyVector[0] = stateVector[1];
	}
	
	/* 'default' enter sequence for region RemoteControl */
	private void enterSequence_RemoteControl_default() {
		/* 'default' enter sequence for region RemoteControl */
		react_RemoteControl__entry_Default();
	}
	
	/* 'default' enter sequence for region CDPlayer */
	private void enterSequence_CDPlayer_default() {
		/* 'default' enter sequence for region CDPlayer */
		react_CDPlayer__entry_Default();
	}
	
	/* shallow enterSequence with history in child r1 */
	private void shallowEnterSequence_CDPlayer_On_r1() {
		/* shallow enterSequence with history in child r1 */
		switch (historyVector[0]) {
		case CDPLAYER_ON_R1_STOP:
			enterSequence_CDPlayer_On_r1_Stop_default();
			break;
		case CDPLAYER_ON_R1_PLAY:
			enterSequence_CDPlayer_On_r1_Play_default();
			break;
		case CDPLAYER_ON_R1_PAUSE:
			enterSequence_CDPlayer_On_r1_Pause_default();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_RemoteControl_Off() {
		/* Default exit sequence for state Off */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_RemoteControl_On() {
		/* Default exit sequence for state On */
		stateVector[0] = State.$NULLSTATE$;
		stateConfVectorPosition = 0;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_CDPlayer_Off() {
		/* Default exit sequence for state Off */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_CDPlayer_On() {
		/* Default exit sequence for state On */
		exitSequence_CDPlayer_On_r1();
	}
	
	/* Default exit sequence for state Stop */
	private void exitSequence_CDPlayer_On_r1_Stop() {
		/* Default exit sequence for state Stop */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
	}
	
	/* Default exit sequence for state Play */
	private void exitSequence_CDPlayer_On_r1_Play() {
		/* Default exit sequence for state Play */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitAction_CDPlayer_On_r1_Play();
	}
	
	/* Default exit sequence for state Pause */
	private void exitSequence_CDPlayer_On_r1_Pause() {
		/* Default exit sequence for state Pause */
		stateVector[1] = State.$NULLSTATE$;
		stateConfVectorPosition = 1;
		exitAction_CDPlayer_On_r1_Pause();
	}
	
	/* Default exit sequence for region RemoteControl */
	private void exitSequence_RemoteControl() {
		/* Default exit sequence for region RemoteControl */
		switch (stateVector[0]) {
		case REMOTECONTROL_OFF:
			exitSequence_RemoteControl_Off();
			break;
		case REMOTECONTROL_ON:
			exitSequence_RemoteControl_On();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region CDPlayer */
	private void exitSequence_CDPlayer() {
		/* Default exit sequence for region CDPlayer */
		switch (stateVector[1]) {
		case CDPLAYER_OFF:
			exitSequence_CDPlayer_Off();
			break;
		case CDPLAYER_ON_R1_STOP:
			exitSequence_CDPlayer_On_r1_Stop();
			break;
		case CDPLAYER_ON_R1_PLAY:
			exitSequence_CDPlayer_On_r1_Play();
			break;
		case CDPLAYER_ON_R1_PAUSE:
			exitSequence_CDPlayer_On_r1_Pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_CDPlayer_On_r1() {
		/* Default exit sequence for region r1 */
		switch (stateVector[1]) {
		case CDPLAYER_ON_R1_STOP:
			exitSequence_CDPlayer_On_r1_Stop();
			break;
		case CDPLAYER_ON_R1_PLAY:
			exitSequence_CDPlayer_On_r1_Play();
			break;
		case CDPLAYER_ON_R1_PAUSE:
			exitSequence_CDPlayer_On_r1_Pause();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_RemoteControl__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_RemoteControl_Off_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_CDPlayer__entry_Default() {
		/* Default react sequence for initial entry  */
		enterSequence_CDPlayer_Off_default();
	}
	
	/* Default react sequence for shallow history entry  */
	private void react_CDPlayer_On_r1__entry_Default() {
		/* Default react sequence for shallow history entry  */
		/* Enter the region with shallow history */
		if (historyVector[0] != State.$NULLSTATE$) {
			shallowEnterSequence_CDPlayer_On_r1();
		} else {
			enterSequence_CDPlayer_On_r1_Stop_default();
		}
	}
	
	private long react(long transitioned_before) {
		/* State machine reactions. */
		return transitioned_before
		;
	}
	
	private long remoteControl_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceRC.onOff) {
				exitSequence_RemoteControl_Off();
				cD.raiseOn();
				enterSequence_RemoteControl_On_default();
				transitioned_after = 0l;
			}
		}
		return transitioned_after
		;
	}
	
	private long remoteControl_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<0l) {
			if (current.ifaceRC.onOff) {
				exitSequence_RemoteControl_On();
				cD.raiseOff();
				enterSequence_RemoteControl_Off_default();
				transitioned_after = 0l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			if (((current.ifaceRC.playPause) && (!rC.getIsPlaying()))) {
				cD.raisePlay();
			}
			if (((current.ifaceRC.playPause) && (rC.getIsPlaying()))) {
				cD.raisePause();
			}
			if (current.ifaceRC.stop) {
				cD.raiseStop();
			}
		}
		return transitioned_after
		;
	}
	
	private long cDPlayer_Off_react(long transitioned_before) {
		/* The reactions of state Off. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceCD.on) {
				exitSequence_CDPlayer_Off();
				entryAction_CDPlayer_On();
				react_CDPlayer_On_r1__entry_Default();
				react(0l);
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long cDPlayer_On_react(long transitioned_before) {
		/* The reactions of state On. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceCD.off) {
				exitSequence_CDPlayer_On();
				enterSequence_CDPlayer_Off_default();
				react(0l);
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long cDPlayer_On_r1_Stop_react(long transitioned_before) {
		/* The reactions of state Stop. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceCD.play) {
				exitSequence_CDPlayer_On_r1_Stop();
				enterSequence_CDPlayer_On_r1_Play_default();
				cDPlayer_On_react(1l);
				transitioned_after = 1l;
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = cDPlayer_On_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long cDPlayer_On_r1_Play_react(long transitioned_before) {
		/* The reactions of state Play. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceCD.stop) {
				exitSequence_CDPlayer_On_r1_Play();
				enterSequence_CDPlayer_On_r1_Stop_default();
				cDPlayer_On_react(1l);
				transitioned_after = 1l;
			} else {
				if (current.ifaceCD.pause) {
					exitSequence_CDPlayer_On_r1_Play();
					enterSequence_CDPlayer_On_r1_Pause_default();
					cDPlayer_On_react(1l);
					transitioned_after = 1l;
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = cDPlayer_On_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
	private long cDPlayer_On_r1_Pause_react(long transitioned_before) {
		/* The reactions of state Pause. */
		long transitioned_after = transitioned_before;
		if (transitioned_after<1l) {
			if (current.ifaceCD.stop) {
				exitSequence_CDPlayer_On_r1_Pause();
				enterSequence_CDPlayer_On_r1_Stop_default();
				cDPlayer_On_react(1l);
				transitioned_after = 1l;
			} else {
				if (current.ifaceCD.play) {
					exitSequence_CDPlayer_On_r1_Pause();
					enterSequence_CDPlayer_On_r1_Play_default();
					cDPlayer_On_react(1l);
					transitioned_after = 1l;
				} else {
					if (current.timeEvents.cDPlayer_CDPlayer_On_r1_Pause_time_event_0) {
						exitSequence_CDPlayer_On();
						current.timeEvents.cDPlayer_CDPlayer_On_r1_Pause_time_event_0 = false;
						enterSequence_CDPlayer_Off_default();
						react(0l);
						transitioned_after = 1l;
					}
				}
			}
		}
		if (transitioned_after==transitioned_before) {
			/* If no transition was taken then execute local reactions */
			transitioned_after = cDPlayer_On_react(transitioned_before);
		}
		return transitioned_after
		;
	}
	
}
