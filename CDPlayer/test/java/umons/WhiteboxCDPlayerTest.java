/** Generated by itemis CREATE code generator. */

package umons;

import static org.mockito.Mockito.*;
import static org.hamcrest.CoreMatchers.*;

import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import umons.CDPlayer.CD;
import org.junit.*;
import static org.junit.Assert.*;
import umons.CDPlayer;
import umons.CDPlayer.State;
import com.yakindu.core.VirtualTimer;
import com.yakindu.core.VirtualTimer.VirtualTimeTask;
import com.yakindu.core.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for CDPlayer
 */
@SuppressWarnings("all")
public class WhiteboxCDPlayerTest {
	CD.OperationCallback cDMock;
	
	private CDPlayer statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void whiteboxCDPlayerTest_setUp() {
		statemachine = new CDPlayer();
		timer = new VirtualTimer(200);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 200, 200);
		statemachine.setTimerService(timer);
		cDMock = mock(CD.OperationCallback.class);
		statemachine.cD().setOperationCallback(cDMock);
		
		
	}

	@After
	public void whiteboxCDPlayerTest_tearDown() {
		statemachine.cD().setOperationCallback(null);
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void testInitialStateConfiguration() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_OFF));
	}
	
	public void activateCDPlayer() {
		statemachine.enter();
		statemachine.cD().raiseOn();
		timer.cycleLeap(1l);
	}
	
	@Test
	public void testActivatedCDPlayer() {
		activateCDPlayer();
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON));
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_STOP));
	}
	
	@Test
	public void testDeactivateCDPlayer() {
		activateCDPlayer();
		statemachine.cD().raiseOff();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_OFF));
	}
	
	@Test
	public void testPlay() {
		activateCDPlayer();
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON));
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_STOP));
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_PLAY));
	}
	
	@Test
	public void testPlayPause() {
		activateCDPlayer();
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		statemachine.cD().raisePause();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_PAUSE));
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_PLAY));
	}
	
	@Test
	public void testPlayStop() {
		activateCDPlayer();
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		statemachine.cD().raiseStop();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_STOP));
	}
	
	@Test
	public void testPlayPauseStop() {
		activateCDPlayer();
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		statemachine.cD().raisePause();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_PAUSE));
		statemachine.cD().raiseStop();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_STOP));
	}
	
	@Test
	public void testTimeout() {
		statemachine.cD().setTimeout(500l);
		activateCDPlayer();
		statemachine.cD().raisePlay();
		timer.cycleLeap(1l);
		statemachine.cD().raisePause();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_ON_R1_PAUSE));
		timer.timeLeap(1l*1000l);
		assertTrue(statemachine.isStateActive(CDPlayer.State.CDPLAYER_OFF));
	}
}
